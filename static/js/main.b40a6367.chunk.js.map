{"version":3,"sources":["components/Form.js","components/TrendingMovie.js","App.js","components/Movie.js","components/MovieResults.js","components/Router.js","serviceWorker.js","index.js"],"names":["Form","state","searchTerm","handleChange","event","_this","setState","Object","defineProperty","target","name","value","handleSubmit","e","preventDefault","trim","props","history","push","concat","react_default","a","createElement","onSubmit","this","type","onChange","placeholder","Component","withRouter","TrendingMovie","trending","undefined","loading","_this2","axios","get","then","res","data","results","className","Fragment","map","movie","Link","to","id","key","alt","original_title","src","poster_path","App","components_Form","components_TrendingMovie","Movie","singleMovie","match","params","movieId","vote_average","release_date","overview","credits","cast","length","slice","filter","img","profile_path","React","MovieResults","movies","performSearch","term","prevProps","Router","BrowserRouter","Switch","Route","path","component","exact","Boolean","window","location","hostname","ReactDOM","render","components_Router","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b40a6367.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport { withRouter } from 'react-router-dom';\n\nclass Form extends Component {\n  state = {\n    searchTerm: ''\n  };\n\n  handleChange = event => {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    if (this.state.searchTerm.trim() === '') {\n      return false;\n    }\n    this.props.history.push(`/search/${this.state.searchTerm}`);\n    this.setState({\n      searchTerm: ''\n    });\n  };\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <input\n          type=\"text\"\n          name=\"searchTerm\"\n          value={this.state.searchTerm}\n          onChange={this.handleChange}\n          placeholder=\"Search movie\"\n        />\n      </form>\n    );\n  }\n}\n\nexport default withRouter(Form);\n","import React, { Component } from 'react';\nimport axios from 'axios';\n\nimport { Link } from 'react-router-dom';\n\nclass TrendingMovie extends Component {\n  state = {\n    trending: undefined,\n    loading: true\n  };\n  componentDidMount() {\n    axios\n      .get(\n        `https://api.themoviedb.org/3/trending/movie/day?api_key=b0994f6029743a2f030a3fed34413897`\n      )\n      .then(res => {\n        const trending = res.data.results;\n        this.setState({ trending, loading: false });\n      });\n  }\n\n  render() {\n    return (\n      <div className=\"trending\">\n        {this.state.loading ? (\n          <div className=\"loader\" />\n        ) : (\n          <React.Fragment>\n            <h2>Trending Movies</h2>\n            <div className=\"movie-list\">\n              {this.state.trending.map(movie => (\n                <Link to={`/movie/${movie.id}`}>\n                  <div key={movie.id}>\n                    <img\n                      alt={movie.original_title}\n                      src={`http://image.tmdb.org/t/p/w185/${\n                        movie.poster_path\n                      }`}\n                    />\n                    <p>{movie.original_title}</p>\n                  </div>\n                </Link>\n              ))}\n            </div>\n          </React.Fragment>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default TrendingMovie;\n","import React, { Component } from 'react';\nimport Form from './components/Form';\nimport TrendingMovie from './components/TrendingMovie';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"wrapper\">\n        <Form />\n        <TrendingMovie />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport axios from 'axios';\n\nclass Movie extends React.Component {\n  state = {\n    singleMovie: undefined,\n    loading: true\n  };\n\n  componentDidMount() {\n    const id = this.props.match.params.movieId;\n    axios\n      .get(\n        `https://api.themoviedb.org/3/movie/${id}?api_key=b0994f6029743a2f030a3fed34413897&language=en-US&append_to_response=credits`\n      )\n      .then(res => {\n        const singleMovie = res.data;\n        this.setState({ singleMovie, loading: false });\n      });\n  }\n\n  render() {\n    return (\n      <div className=\"wrapper\">\n        <div className=\"singleMovie\">\n          {this.state.loading ? (\n            <div className=\"loader\" />\n          ) : (\n            <React.Fragment>\n              <img\n                src={`http://image.tmdb.org/t/p/w185/${\n                  this.state.singleMovie.poster_path\n                }`}\n                alt={this.state.singleMovie.original_title}\n              />\n              {this.state.singleMovie.vote_average !== 0 && (\n                <p>{this.state.singleMovie.vote_average}</p>\n              )}\n              <h1>{this.state.singleMovie.original_title}</h1>\n              <p>{this.state.singleMovie.release_date}</p>\n              <p>{this.state.singleMovie.overview}</p>\n\n              {this.state.singleMovie.credits.cast.length !== 0 && (\n                <div className=\"cast\">\n                  <h3>Cast</h3>\n                  <ul className=\"cast_list\">\n                    {this.state.singleMovie.credits.cast\n                      .slice(0, 10)\n                      .filter(img => img.profile_path)\n                      .map(cast => {\n                        return (\n                          <li key={cast.name}>\n                            <img\n                              className=\"cast_img\"\n                              src={`http://image.tmdb.org/t/p/w185/${\n                                cast.profile_path\n                              }`}\n                              alt={cast.original_title}\n                            />\n                            <p>{cast.name}</p>\n                          </li>\n                        );\n                      })}\n                  </ul>\n                </div>\n              )}\n            </React.Fragment>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Movie;\n","import React from 'react';\nimport axios from 'axios';\nimport Form from './Form';\n\nimport { Link } from 'react-router-dom';\n\nclass MovieResults extends React.Component {\n  state = {\n    movies: [],\n    loading: true\n  };\n\n  performSearch = () => {\n    const term = this.props.match.params.term;\n    axios\n      .get(\n        `https://api.themoviedb.org/3/search/movie?api_key=b0994f6029743a2f030a3fed34413897&language=en-US&query=${term}&page=1&include_adult=false`\n      )\n      .then(res => {\n        const movies = res.data.results;\n        this.setState({ movies, loading: false });\n      });\n  };\n\n  componentDidMount() {\n    this.performSearch();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.match.params.term !== this.props.match.params.term) {\n      this.performSearch();\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"wrapper\">\n        {this.state.loading ? (\n          <div className=\"loader\" />\n        ) : (\n          <React.Fragment>\n            <Form />\n            {this.state.movies.length === 0 ? (\n              <p>No movies found</p>\n            ) : (\n              <React.Fragment>\n                <h2>Results:</h2>\n                <div className=\"movie-list\">\n                  {this.state.movies\n                    .filter(img => img.poster_path)\n                    .map(movie => {\n                      return (\n                        <Link to={`/movie/${movie.id}`} key={movie.id}>\n                          <div>\n                            <img\n                              alt={movie.original_title}\n                              src={`http://image.tmdb.org/t/p/w185/${\n                                movie.poster_path\n                              }`}\n                            />\n                            <p>{movie.original_title}</p>\n                          </div>\n                        </Link>\n                      );\n                    })}\n                </div>\n              </React.Fragment>\n            )}\n          </React.Fragment>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default MovieResults;\n","import React from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\n\nimport App from '../App';\nimport Movie from './Movie';\nimport MovieResults from './MovieResults';\n\nconst Router = () => (\n  <BrowserRouter>\n    <Switch>\n      <Route path=\"/\" component={App} exact />\n      <Route path=\"/movie/:movieId\" component={Movie} />\n      <Route path=\"/search/:term\" component={MovieResults} />\n    </Switch>\n  </BrowserRouter>\n);\n\nexport default Router;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Router from './components/Router';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Router />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}