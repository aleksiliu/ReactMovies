{"version":3,"sources":["components/Form.js","components/TrendingMovie.js","components/Main.js","components/Error.js","components/Movie.js","components/MovieResults.js","components/Actor.js","components/Router.js","serviceWorker.js","index.js","App.js"],"names":["Form","state","searchTerm","handleChange","event","_this","setState","Object","defineProperty","target","name","value","handleSubmit","e","preventDefault","trim","props","history","push","concat","react_default","a","createElement","onSubmit","this","type","onChange","placeholder","Component","withRouter","API_KEY","process","console","log","TrendingMovie","trending","undefined","loading","_this2","axios","get","then","res","data","results","className","Fragment","map","movie","Link","to","id","key","alt","original_title","src","poster_path","Main","components_Form","components_TrendingMovie","Error","Movie","singleMovie","error","match","params","movieId","catch","components_Error","backdrop_path","style","background","release_date","vote_average","react_star_rating_component_default","editing","starCount","emptyStarColor","genres","genre","overview","credits","cast","length","slice","filter","img","profile_path","character","React","MovieResults","movies","page","getMovie","term","performSearch","performSearchMore","objectSpread","toConsumableArray","loadMore","prevState","prevProps","total_pages","onClick","options","label","Actor","actor","sortedBy","isSearchable","ellipsis","string","substring","actorId","_this3","_this$state","goBack","birthday","biography","react_select_esm","movie_credits","sort","b","Date","Router","HashRouter","Switch","Route","path","component","exact","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c7a78c44.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport { withRouter } from 'react-router-dom';\n\nclass Form extends Component {\n  state = {\n    searchTerm: ''\n  };\n\n  handleChange = event => {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    if (this.state.searchTerm.trim() === '') {\n      return false;\n    }\n    this.props.history.push(`/search/${this.state.searchTerm}`);\n    this.setState({\n      searchTerm: ''\n    });\n  };\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <input\n          type=\"text\"\n          name=\"searchTerm\"\n          value={this.state.searchTerm}\n          onChange={this.handleChange}\n          placeholder=\"Search movie\"\n        />\n      </form>\n    );\n  }\n}\n\nexport default withRouter(Form);\n","import React, { Component } from 'react';\nimport axios from 'axios';\n\nimport { Link } from 'react-router-dom';\n\nconst API_KEY = process.env.REACT_APP_MOVIE_API_KEY;\n\nconsole.log(API_KEY);\n\nclass TrendingMovie extends Component {\n  state = {\n    trending: undefined,\n    loading: true\n  };\n  componentDidMount() {\n    axios\n      .get(`https://api.themoviedb.org/3/trending/movie/day?api_key=${API_KEY}`)\n      .then(res => {\n        const trending = res.data.results;\n        this.setState({ trending, loading: false });\n      });\n  }\n\n  render() {\n    return (\n      <div className=\"trending\">\n        {this.state.loading ? (\n          <div className=\"loader\" />\n        ) : (\n          <React.Fragment>\n            <h3>Trending </h3>\n            <div className=\"movie-list\">\n              {this.state.trending.map(movie => (\n                <Link to={`/movie/${movie.id}`} key={movie.id}>\n                  <div>\n                    <img\n                      alt={movie.original_title}\n                      src={`http://image.tmdb.org/t/p/w342/${\n                        movie.poster_path\n                      }`}\n                      className=\"movie-img\"\n                    />\n                    <p className=\"movie-title\">{movie.original_title}</p>\n                  </div>\n                </Link>\n              ))}\n            </div>\n          </React.Fragment>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default TrendingMovie;\n","import React from 'react';\nimport Form from './Form';\nimport TrendingMovie from './TrendingMovie';\nimport '../App.css';\n\nconst Main = () => {\n  return (\n    <div className=\"wrapper\">\n      <Form />\n      <TrendingMovie />\n    </div>\n  );\n};\n\nexport default Main;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst Error = () => {\n  return (\n    <div className=\"wrapper\">\n      <p className=\"center\">\n        Error :( Get back to <Link to={'/'}>homepage</Link>\n      </p>\n    </div>\n  );\n};\n\nexport default Error;\n","import React from 'react';\nimport axios from 'axios';\nimport StarRatingComponent from 'react-star-rating-component';\nimport Error from './Error';\nimport { Link } from 'react-router-dom';\n\nconst API_KEY = process.env.REACT_APP_MOVIE_API_KEY;\n\nclass Movie extends React.Component {\n  state = {\n    singleMovie: undefined,\n    error: false,\n    loading: true\n  };\n\n  componentDidMount() {\n    const id = this.props.match.params.movieId;\n    axios\n      .get(\n        `https://api.themoviedb.org/3/movie/${id}?api_key=${API_KEY}&language=en-US&append_to_response=credits`\n      )\n      .then(res => {\n        const singleMovie = res.data;\n        this.setState({ singleMovie, loading: false });\n      })\n      .catch(error => {\n        console.log('error: ' + error);\n        this.setState({ error: true });\n      });\n  }\n\n  render() {\n    if (this.state.error) {\n      return <Error />;\n    }\n\n    return (\n      <div className=\"singleMovie\">\n        {this.state.loading ? (\n          <div className=\"loader\" />\n        ) : (\n          <React.Fragment>\n            {this.state.singleMovie.backdrop_path !== null && (\n              <div\n                className=\"bg\"\n                style={{\n                  background: `linear-gradient(rgba(0, 0, 0, 0), rgba(27, 33, 47, 0.9)), url(http://image.tmdb.org/t/p/w1280/${\n                    this.state.singleMovie.backdrop_path\n                  }) top center / cover no-repeat`\n                }}\n              />\n            )}\n            <div className=\"movie\">\n              <div className=\"poster\">\n                <img\n                  src={`http://image.tmdb.org/t/p/w185/${\n                    this.state.singleMovie.poster_path\n                  }`}\n                  className=\"poster-img\"\n                  alt={this.state.singleMovie.original_title}\n                />\n              </div>\n              <div className=\"movie-details\">\n                <p className=\"movie-details-date\">\n                  {this.state.singleMovie.release_date}\n                </p>\n                <h1>{this.state.singleMovie.original_title}</h1>\n\n                {this.state.singleMovie.vote_average !== 0 && (\n                  <div className=\"star\">\n                    <StarRatingComponent\n                      name=\"rate2\"\n                      editing={false}\n                      starCount={10}\n                      value={this.state.singleMovie.vote_average}\n                      emptyStarColor={'000'}\n                    />\n                    <span>{this.state.singleMovie.vote_average} / 10</span>\n                  </div>\n                )}\n                <div>\n                  <ul className=\"genres\">\n                    {this.state.singleMovie.genres.map(genre => (\n                      <li>{genre.name}</li>\n                    ))}\n                  </ul>\n                </div>\n              </div>\n              <div className=\"overview\">\n                <h3>Overview</h3>\n                <p>{this.state.singleMovie.overview}</p>\n              </div>\n              {this.state.singleMovie.credits.cast.length !== 0 && (\n                <div className=\"cast\">\n                  <h3>Cast</h3>\n                  <ul className=\"cast_list\">\n                    {this.state.singleMovie.credits.cast\n                      .slice(0, 10)\n                      .filter(img => img.profile_path)\n                      .map(cast => {\n                        return (\n                          <Link to={`/actor/${cast.id}`} key={cast.id}>\n                            <li key={cast.name}>\n                              <img\n                                className=\"cast_img\"\n                                src={`http://image.tmdb.org/t/p/w185/${\n                                  cast.profile_path\n                                }`}\n                                alt={cast.original_title}\n                              />\n                              <p className=\"sub-title\">{cast.character}</p>\n                              <p>{cast.name}</p>\n                            </li>\n                          </Link>\n                        );\n                      })}\n                  </ul>\n                </div>\n              )}\n            </div>\n          </React.Fragment>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Movie;\n","import React from 'react';\nimport axios from 'axios';\nimport Form from './Form';\n\nimport { Link } from 'react-router-dom';\n\nconst API_KEY = process.env.REACT_APP_MOVIE_API_KEY;\n\nclass MovieResults extends React.Component {\n  state = {\n    movies: {},\n    page: 1,\n    loading: true\n  };\n\n  getMovie = () => {\n    const term = this.props.match.params.term;\n    return axios.get(\n      `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&language=en-US&query=${term}&page=${\n        this.state.page\n      }&include_adult=false`\n    );\n  };\n\n  performSearch = () => {\n    this.getMovie().then(res => {\n      const movies = res.data;\n      this.setState({\n        movies,\n        loading: false\n      });\n    });\n  };\n\n  performSearchMore = () => {\n    this.getMovie().then(res => {\n      const movies = res.data;\n      this.setState({\n        movies: {\n          ...movies,\n          results: [...this.state.movies.results, ...movies.results]\n        },\n        loading: false\n      });\n    });\n  };\n\n  loadMore = () => {\n    this.setState(\n      (prevState, props) => ({\n        page: prevState.page + 1\n      }),\n      () => this.performSearchMore()\n    );\n  };\n\n  componentDidMount() {\n    this.performSearch();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.match.params.term !== this.props.match.params.term) {\n      this.setState(\n        state => ({\n          page: 1\n        }),\n        () => this.performSearch()\n      );\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"wrapper\">\n        <Form />\n        {this.state.loading ? (\n          <div className=\"loader\" />\n        ) : (\n          <React.Fragment>\n            {this.state.movies.results.length === 0 ? (\n              <p>No movies found</p>\n            ) : (\n              <React.Fragment>\n                <h3 className=\"results-title\">\n                  Results for \"{this.props.match.params.term}\"\n                </h3>\n\n                <div className=\"movie-search-container\">\n                  {this.state.movies.results\n                    .filter(img => img.poster_path)\n                    .map(movie => {\n                      return (\n                        <Link\n                          to={`/movie/${movie.id}`}\n                          key={movie.id}\n                          className=\"movie-item\"\n                        >\n                          <img\n                            alt={movie.original_title}\n                            src={`http://image.tmdb.org/t/p/w342/${\n                              movie.poster_path\n                            }`}\n                            className=\"movie-search-img\"\n                          />\n                          <div className=\"movie-search-details\">\n                            <h3>{movie.original_title}</h3>\n                            <p>{movie.overview}</p>\n                          </div>\n                        </Link>\n                      );\n                    })}\n                </div>\n              </React.Fragment>\n            )}\n          </React.Fragment>\n        )}\n        <div className=\"load\">\n          {this.state.movies.page < this.state.movies.total_pages && (\n            <div className=\"load-button\" onClick={this.loadMore}>\n              Load more\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default MovieResults;\n","import React from 'react';\nimport axios from 'axios';\nimport Error from './Error';\n\nimport { Link } from 'react-router-dom';\n\nimport Select from 'react-select';\n\nconst options = [\n  { value: 'rating', label: 'Rating' },\n  { value: 'oldest', label: 'Oldest' },\n  { value: 'newest', label: 'Newest' }\n];\n\nconst API_KEY = process.env.REACT_APP_MOVIE_API_KEY;\n\nclass Actor extends React.Component {\n  state = {\n    actor: undefined,\n    loading: true,\n    sortedBy: {\n      label: 'Rating',\n      value: 'rating'\n    },\n    isSearchable: false,\n    error: false\n  };\n\n  componentDidMount() {\n    const id = this.props.match.params.actorId;\n\n    axios\n      .get(\n        `https://api.themoviedb.org/3/person/${id}?api_key=${API_KEY}&language=en-US&&append_to_response=movie_credits`\n      )\n      .then(res => {\n        const actor = res.data;\n        this.setState({ actor, loading: false });\n      })\n      .catch(error => {\n        console.log('error: ' + error);\n        this.setState({ error: true });\n      });\n  }\n\n  handleChange = sortedBy => {\n    this.setState({ sortedBy });\n  };\n\n  ellipsis = string => {\n    if (string.length > 422) return string.substring(0, 422) + '...';\n    else return string;\n  };\n\n  render() {\n    const { sortedBy, isSearchable } = this.state;\n\n    if (this.state.error) {\n      return <Error />;\n    }\n\n    return (\n      <div className=\"wrapper\">\n        {this.state.loading ? (\n          <div className=\"loader\" />\n        ) : (\n          <React.Fragment>\n            <div className=\"actor\">\n              <div className=\"actor-bio flex\">\n                <span\n                  className=\"back\"\n                  onClick={() => this.props.history.goBack()}\n                >\n                  Back\n                </span>\n                <h1> {this.state.actor.name} </h1>\n                <h3> {this.state.actor.birthday} </h3>\n                {this.state.actor.biography === '' ? (\n                  <p>No bio</p>\n                ) : (\n                  <p>{this.ellipsis(this.state.actor.biography)}</p>\n                )}\n              </div>\n              <div className=\"actor-img flex\">\n                <img\n                  alt={this.state.actor.name}\n                  src={`http://image.tmdb.org/t/p/w500/${\n                    this.state.actor.profile_path\n                  }`}\n                  className=\"movie-img\"\n                />\n              </div>\n            </div>\n            <h3>Filmography</h3>\n            <div className=\"sort\">\n              <p>Sort by</p>\n              <Select\n                value={sortedBy}\n                onChange={this.handleChange}\n                options={options}\n                isSearchable={isSearchable}\n              />\n            </div>\n\n            <div className=\"movie-list\">\n              {[...this.state.actor.movie_credits.cast]\n                .sort((a, b) => {\n                  switch (this.state.sortedBy.value) {\n                    case 'newest':\n                      return (\n                        new Date(b.release_date) - new Date(a.release_date)\n                      );\n                      break;\n                    case 'oldest':\n                      return (\n                        new Date(a.release_date) - new Date(b.release_date)\n                      );\n                      break;\n                    case 'rating':\n                      return b.vote_average - a.vote_average;\n                      break;\n                    default:\n                      return b.vote_average - a.vote_average;\n                  }\n                })\n                .filter(img => img.poster_path)\n                .map(movie => {\n                  return (\n                    <Link to={`/movie/${movie.id}`} key={movie.id}>\n                      <div>\n                        <img\n                          alt={movie.original_title}\n                          src={`http://image.tmdb.org/t/p/w342/${\n                            movie.poster_path\n                          }`}\n                          className=\"movie-img\"\n                        />\n                        <p className=\"movie-title\">{movie.original_title}</p>\n                        <p className=\"movie-title\">{movie.release_date}</p>\n                        {movie.vote_average !== 0 && (\n                          <p className=\"movie-title\">{movie.vote_average}</p>\n                        )}\n                      </div>\n                    </Link>\n                  );\n                })}\n            </div>\n          </React.Fragment>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Actor;\n","import React from 'react';\nimport { HashRouter, Switch, Route } from 'react-router-dom';\n\nimport Main from './Main';\nimport Movie from './Movie';\nimport MovieResults from './MovieResults';\nimport Actor from './Actor';\n\nexport default () => (\n  <HashRouter>\n    <Switch>\n      <Route path=\"/\" component={Main} exact />\n      <Route path=\"/movie/:movieId\" component={Movie} />\n      <Route path=\"/search/:term\" component={MovieResults} />\n      <Route path=\"/actor/:actorId\" component={Actor} />\n    </Switch>\n  </HashRouter>\n);\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport Router from './components/Router';\n\nexport default () => <Router />;\n"],"sourceRoot":""}